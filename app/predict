#!/usr/bin/env Rscript

## ---- Initialising libraries ----
library(tibble)
library(tidyr)
library(readr)
library(purrr)
library(dplyr)
library(stringr)
library(lubridate)
library(glue)
library(zeallot)
library(pROC)
library(forcats)
library(imputeTS)
library(rjson)
library(caTools)
options(dplyr.summarise.inform = FALSE)

## Script that holp helper functions
source('algorithm/0.common_funcs.R')


## Get the training data file
data   <-
  glue(
    '/opt/ml_vol/inputs/data/testing/regressionBaseMainInput/',
    list.files(path = "/opt/ml_vol/inputs/data/testing/regressionBaseMainInput")
  )


tester <- function(data_path)
{
  ## Load model and test data
  trained_model         <- read_rds('/opt/ml_vol/model/artifacts/model.rds')
  variables_to_encode   <- trained_model$variables_to_encode
  id_column             <- trained_model$id_column
  exp_vars              <- trained_model$exp_vars
  encodings             <- trained_model$encodings
  encoding_outputs       <- trained_model$encoding_outputs
  variables_numeric     <- trained_model$variables_numeric
  df_test             <- read_csv(data_path)
  
  
  id <- df_test %>% select(id_column)
  

  df_test <- df_test[, which(colMeans(!is.na(df_test)) > 0.4)]
  df_test[variables_to_encode] <-
    sapply(df_test[variables_to_encode], as.character)
  df_test[variables_numeric]   <-
    sapply(df_test[variables_numeric], as.numeric)
  
  df_test_n <- df_test %>% select(variables_numeric) %>% na_mean(option = "mean")
  df_test_n <- as.data.frame(scale(df_test_n))
  df_test_c <- df_test %>% select(variables_to_encode) %>%
    mutate(across(everything(), ~ replace_na(.x, calc_mode(.x))))
  
  df_test <- cbind(id,df_test_n,df_test_c)
  
  same <- sapply(df_test, function(.col){
    all(is.na(.col))  || all(.col[1L] == .col)
  })
  
  
  same <- df_test[same] %>% colnames() %>% as.list()
  
  
  for(i in same){
    if(i %in% variables_numeric){
      df_test[5,i] = 999
    }else{
      df_test[5,i] = "999"
    }
  }
  
  full_data_numeric <- df_test %>%
    select(variables_numeric)
  
  if(length(variables_to_encode) != 0)
  {
    full_data_categorical <-
      df_test  %>% select(variables_to_encode) %>%
      mutate(across(everything(), ~ replace_na(.x, calc_mode(.x))))
    
    full_data_categorical <- data.frame(predict(encodings, newdata=full_data_categorical))
    for(i in encoding_outputs) {
      l = full_data_categorical %>% colnames() %>% as.list()
      if(i %in% l){
        invisible()
        
      } else {
        full_data_categorical <- full_data_categorical %>% 
          mutate(missing_column = 0) 
        colnames(full_data_categorical)[colnames(full_data_categorical) == "missing_column"] = i
      }
    }
    
    
    df_test <-
      cbind(id, full_data_numeric, full_data_categorical)
    
  } else{
    df_test <-
      cbind(id, full_data_numeric)
    
  }
  
  df_test <- df_test %>%
  mutate(across(everything(), ~ replace_na(.x,0)))
  
  model <- trained_model$mdl
  
  ## Getting probability of each row for the target_class
  test_results <-
    tester_func(mdl = model,
                test_set = df_test,
                feature_names = exp_vars)
  
  test_results <- test_results$test_predictions
  
  ## Saving ids with prediction
  predictions <- cbind(id, test_results)
  predictions %>% write.csv('/opt/ml_vol/outputs/testing_outputs/test_predictions.csv', row.names=FALSE)
}



tryCatch(               
  
  # Specifying expression
  expr = {                     
    tester(data)
  },
  # Specifying error message
  error = function(e){         
    write(e %>% as.character(),file="/opt/ml_vol/outputs/errors/test_failure.txt",append=FALSE)
  }
)
